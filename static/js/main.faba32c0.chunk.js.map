{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","about","onClick","chooseColor","style","backgroundColor","height","width","borderRadius","toggleMode","htmlFor","TextForm","useState","text","setText","countWords","str","replace","split","length","color","heading","onChange","event","target","value","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","toast","success","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Alerts","alert","class","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","btnColor","setBtnColor","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.faba32c0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand \"  href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n            </li>\r\n          </ul>\r\n          <button className=\"btn-circle mx-2\" onClick={()=>props.chooseColor('red')}  style={{backgroundColor:'red',height:'20px',width:'20px',borderRadius:'20px'}} type=\"submit\"></button>\r\n          <button className=\" btn-circle\"  onClick={()=>props.chooseColor('green')} style={{backgroundColor:'green',height:'20px',width:'20px',borderRadius:'20px'}} type=\"submit\"></button>\r\n          <button className=\" btn-circle mx-2\"  onClick={()=>props.chooseColor('yellow')} style={{backgroundColor:'yellow',height:'20px',width:'20px',borderRadius:'20px'}} type=\"submit\"></button>\r\n          <div className={`form-check form-switch form-inline text-${ props.mode==='light'?'dark':'light'} mx-3`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckChecked\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">{props.mode==='light'?'Enable Dark Mode':'Disable Dark Mode'}</label>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={title:PropTypes.string.isRequired,about:PropTypes.string}\r\n// Navbar.defaultProps={title:\"Navbar\",about:\"about text Here\"}","\r\nimport React, {useState}from 'react'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function TextForm(props) {\r\n    // Declare a new state variable, which we'll call \"count\"\r\nconst [text, setText] = useState(\"\");//* Here text is a state variable and setText is function to update the text value\r\n//* we cannot use a variable text to update the value of state instead we should use setText() function\r\n   // setText(\"Hey Amrit\");\r\n   const handleUpButtonClick =()=>{\r\n   // console.log(\"Button Clicked\"+text);\r\n    let newText=text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text has been converted to upperCase\",\"success\")\r\n}\r\nconst handleLoButtonClick=()=>{\r\n    let newText=text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text has been converted to lowerCase\",\"success\")\r\n}\r\nconst handleOnChange =(event)=>{\r\n    //console.log(\"On change\");\r\n    setText(event.target.value)\r\n    //*In order to write  in textArea we have to make handler function in our case the function is handleOnChange() which enable us to write with in our text area otherwise we cannot write\r\n}\r\nconst handleCopyButtonClick=()=>{\r\n    navigator.clipboard.writeText(text);\r\n    // alert(\"Text Copied!\")\r\n    toast.success('text copied!');\r\n    props.showAlert(\"Copied to the clipBoard!\",\"success\")\r\n}\r\nconst countWords=(str)=>{\r\n    str = str.replace(/(^\\s*)|(\\s*$)/gi,\"\");\r\n         str = str.replace(/[ ]{2,}/gi,\" \");\r\n         str = str.replace(/\\n /,\"\\n\");\r\n         return str.split(' ').length;\r\n}\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{ color:props.mode==='light'?'#271a6f':'white'}}>\r\n        <div className=\"mb-3\">\r\n  <label htmlFor=\"myBox\" className=\"form-label\"><h3>{props.heading}</h3></label>\r\n  <textarea className=\"form-control my-3\" style={{ backgroundColor:props.mode==='light'?'white':'#271a6f', color:props.mode==='light'?'#271a6f':'white'}} onChange={handleOnChange} value={text} id=\"exampleFormControlTextarea1\" rows=\"12\"></textarea>\r\n</div>\r\n<button className=\"btn \" style={props.color} onClick={handleUpButtonClick}>convertToUppercase</button>\r\n<button className=\"btn  mx-3\" style={props.color} onClick={handleLoButtonClick}>convertToLowercase</button>\r\n<button className=\"btn  \" style={props.color} onClick={handleCopyButtonClick}>Copy</button>\r\n<ToastContainer\r\n        position=\"bottom-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n        </div>\r\n        <div className=\"container\"  style={{ color:props.mode==='light'?'#271a6f':'white'}}>\r\n        <h3>Your text Summary:</h3>\r\n        <p>{text===\"\"?0:countWords(text)} words and {text.length} characters</p>\r\n        <p>{text===\"\"?0:0.008 * countWords(text)} Minutes Read</p>\r\n        <h4>Preview</h4>\r\n        <p>{text.length>0?text:'Enter your text to preview it here.'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alerts(props) {\r\n    const capitalize=(word)=>{\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&<div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)} </strong> {props.alert.msg}\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alerts from './components/Alerts';\n// Importing routers\n// using CommonJS modules\nimport React from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n// let name = \"Amrit Acharya\"\n// function getName(user){\n//   return user.fname +\" \"+user.lname;\n// }\n// const users={\n//   fname:\"Amrit\",\n//   lname:\"Acharya\"\n// }\nfunction App() {\n  const [mode,setMode]=useState('light');\n  const [alert, setAlert] = useState(null);\n  const [btnColor,setBtnColor] = useState({backgroundColor:'blue',color:'white'})\n  //Changing color of buttons\n  const handleColorChange=(color)=>{\n    if(color==='red'){\n        setBtnColor({backgroundColor:'red',color:'white'})\n    }\n    else if(color==='yellow'){\n      setBtnColor({backgroundColor:'yellow',color:'white'})\n\n    }\n    else{\n      setBtnColor({backgroundColor:'green',color:'white'})\n    }\n  }\n  // Creating a function to set alert\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    \n    })\n    setTimeout(() => {\n       setAlert(null)\n      }, 2000);\n  }\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor='#271a6f'\n      showAlert(\"Dark mode has been enabled\",\"success\")\n    }else{\n      setMode('light')\n      document.body.style.backgroundColor='white'\n      showAlert(\"Light mode has been enabled\",\"success\")\n    }\n  }\n    return ( < >\n     { // <Router>\n    }\n      \n    <Navbar title =\"TextUtils\" mode={mode} about=\"AboutUs\" toggleMode={toggleMode} chooseColor={handleColorChange}/>\n    <Alerts alert={alert}/>\n    {//<Switch>\n    /*It is a good practice to use exact path instead using only path beacause rect uses partial matching */\n         // <Route exact path=\"/about\">\n          //   <About  modes={mode} />\n          // </Route>\n          // <Route exact path=\"/\">\n       \n          \n        //   </Route>\n        // </Switch>\n      }\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} color={btnColor}/>\n         {//</Router>\n        }\n   \n      </ >\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}